import { NextRequest, NextResponse } from 'next/server'
import { Octokit } from '@octokit/rest'
import { createServerSupabase } from '@/lib/supabase-server'

export async function POST(request: NextRequest) {
  try {
    const { repository, branch, content, domain } = await request.json()
    
    if (!repository || !content) {
      return NextResponse.json({ error: 'Repository and content are required' }, { status: 400 })
    }

    // Get user from session
    const supabase = createServerSupabase()
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Get user's GitHub token
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('github_token')
      .eq('id', user.id)
      .single()

    if (userError || !userData?.github_token) {
      return NextResponse.json({ 
        error: 'GitHub integration not connected. Please connect your GitHub account first.' 
      }, { status: 400 })
    }

    // Initialize GitHub client
    const octokit = new Octokit({
      auth: userData.github_token
    })

    // Parse repository owner and name
    const [owner, repo] = repository.split('/')
    if (!owner || !repo) {
      return NextResponse.json({ error: 'Invalid repository format. Use owner/repo' }, { status: 400 })
    }

    // Create branch name
    const branchName = `llmx-update-${Date.now()}`
    const targetBranch = branch || 'main'

    try {
      // Get the latest commit SHA from the target branch
      const { data: refData } = await octokit.rest.git.getRef({
        owner,
        repo,
        ref: `heads/${targetBranch}`
      })

      const baseSha = refData.object.sha

      // Create new branch
      await octokit.rest.git.createRef({
        owner,
        repo,
        ref: `refs/heads/${branchName}`,
        sha: baseSha
      })

      // Create or update llms.txt file
      const filePath = 'llms.txt'
      
      try {
        // Check if file exists
        await octokit.rest.repos.getContent({
          owner,
          repo,
          path: filePath,
          ref: branchName
        })
        
        // File exists, update it
        await octokit.rest.repos.createOrUpdateFileContents({
          owner,
          repo,
          path: filePath,
          message: 'Update llms.txt for AI content discovery',
          content: Buffer.from(content).toString('base64'),
          branch: branchName,
          committer: {
            name: 'LLMX Bot',
            email: 'bot@llmx.dev'
          }
        })
      } catch (error: any) {
        if (error.status === 404) {
          // File doesn't exist, create it
          await octokit.rest.repos.createOrUpdateFileContents({
            owner,
            repo,
            path: filePath,
            message: 'Add llms.txt for AI content discovery',
            content: Buffer.from(content).toString('base64'),
            branch: branchName,
            committer: {
              name: 'LLMX Bot',
              email: 'bot@llmx.dev'
            }
          })
        } else {
          throw error
        }
      }

      // Create pull request
      const { data: prData } = await octokit.rest.pulls.create({
        owner,
        repo,
        title: 'Add llms.txt for AI content discovery',
        head: branchName,
        base: targetBranch,
        body: `## ðŸ¤– AI Content Discovery Enhancement

This PR adds an \`llms.txt\` file to help AI systems discover and understand your site's canonical content.

### What's included:
- **Robots-style directives** for LLM crawlers
- **Structured JSON data** with metadata
- **Validated URLs** from your sitemap
- **AI-ready scoring**: Generated by [LLMX](https://llmx.dev)

### Domain: ${domain}

### Benefits:
- ðŸŽ¯ **Better AI visibility** - Help LLMs find your best content
- ðŸ“Š **Structured data** - Clear instructions for AI crawlers  
- ðŸ”„ **Auto-updates** - Keep your AI presence fresh
- ðŸ“ˆ **SEO boost** - Stay ahead of AI search trends

---

*Generated by [LLMX](https://llmx.dev) - The llms.txt Generator*

### Next steps:
1. Review the generated file
2. Merge this PR
3. Consider setting up auto-updates via LLMX

Need help? Check out our [documentation](https://docs.llmx.dev) or [contact support](mailto:support@llmx.dev).`
      })

      // Save PR record to database
      const { error: prError } = await supabase
        .from('github_prs')
        .insert({
          project_id: null, // We'll link this to a project later
          pr_id: prData.id.toString(),
          url: prData.html_url,
          title: prData.title,
          branch: branchName,
          status: 'pending'
        })

      if (prError) {
        console.error('Error saving PR record:', prError)
      }

      return NextResponse.json({
        success: true,
        prUrl: prData.html_url,
        prNumber: prData.number,
        branch: branchName
      })

    } catch (error: any) {
      console.error('GitHub API error:', error)
      
      if (error.status === 404) {
        return NextResponse.json({ 
          error: 'Repository not found or access denied. Please check the repository name and permissions.' 
        }, { status: 404 })
      }
      
      if (error.status === 403) {
        return NextResponse.json({ 
          error: 'GitHub token expired or insufficient permissions. Please reconnect your GitHub account.' 
        }, { status: 403 })
      }

      return NextResponse.json({ 
        error: 'Failed to create pull request. Please try again.' 
      }, { status: 500 })
    }

  } catch (error) {
    console.error('Error creating GitHub PR:', error)
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    )
  }
}
